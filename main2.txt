package com.example.kanishka_39

import android.annotation.SuppressLint
import android.app.*
import android.content.Context
import android.content.Intent
import android.content.SharedPreferences
import android.content.pm.PackageManager
import android.location.Geocoder
import android.os.Build
import android.os.Bundle
import android.telephony.SmsManager
import android.view.ContextMenu
import android.view.Menu
import android.view.MenuItem
import android.view.View
import android.widget.*
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import androidx.appcompat.widget.Toolbar
import androidx.core.app.ActivityCompat
import androidx.core.app.NotificationCompat
import java.util.*

class MainActivity2 : AppCompatActivity() {

    private lateinit var sharedPreferences: android.content.SharedPreferences
    private lateinit var notificationManager: NotificationManager

    @SuppressLint("MissingInflatedId")
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContentView(R.layout.activity_main2)

        notificationManager = getSystemService(NOTIFICATION_SERVICE) as NotificationManager

        val toolbar = findViewById<Toolbar>(R.id.myToolbar)
        setSupportActionBar(toolbar)

        val color = findViewById<TextView>(R.id.textView)
        registerForContextMenu(color)

        val button3 = findViewById<Button>(R.id.popbutton)
        button3.setOnClickListener { view -> showpopupmenu(view) }

        val button4 = findViewById<Button>(R.id.locbutton)
        button4.setOnClickListener {
            val tv = findViewById<TextView>(R.id.loc)
            val lat = 28.8768
            val long = 76.6211
            val add = getadd(lat, long)
            tv.text = add ?: "address not found"
        }

        if (intent?.action == "SHOW_NOTIFICATION") {
            showScheduledNotification()
        }

        val hotel1 = findViewById<Button>(R.id.hotel1)
        val hotel2 = findViewById<Button>(R.id.hotel2)
        val hotel3 = findViewById<Button>(R.id.hotel3)
        val hotel4 = findViewById<Button>(R.id.hotel4)

        val unbookHotel1 = findViewById<Button>(R.id.unbookHotel1)
        val unbookHotel2 = findViewById<Button>(R.id.unbookHotel2)
        val unbookHotel3 = findViewById<Button>(R.id.unbookHotel3)
        val unbookHotel4 = findViewById<Button>(R.id.unbookHotel4)

        sharedPreferences = getSharedPreferences("HotelPrefs", MODE_PRIVATE)

        hotel1.setOnClickListener { handleHotelBooking("Hotel 1") }
        hotel2.setOnClickListener { handleHotelBooking("Hotel 2") }
        hotel3.setOnClickListener { handleHotelBooking("Hotel 3") }
        hotel4.setOnClickListener { handleHotelBooking("Hotel 4") }

        unbookHotel1.setOnClickListener { handleUnbooking("Hotel 1") }
        unbookHotel2.setOnClickListener { handleUnbooking("Hotel 2") }
        unbookHotel3.setOnClickListener { handleUnbooking("Hotel 3") }
        unbookHotel4.setOnClickListener { handleUnbooking("Hotel 4") }

        // Request notification permission for Android 13+
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            if (ActivityCompat.checkSelfPermission(
                    this,
                    android.Manifest.permission.POST_NOTIFICATIONS
                ) != PackageManager.PERMISSION_GRANTED
            ) {
                ActivityCompat.requestPermissions(
                    this,
                    arrayOf(android.Manifest.permission.POST_NOTIFICATIONS),
                    100
                )
            }
        }
    }

    override fun onCreateOptionsMenu(menu: Menu?): Boolean {
        menuInflater.inflate(R.menu.option, menu)
        return true
    }

    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        when (item.itemId) {
            R.id.notification -> {
                Toast.makeText(this, "Notification ON", Toast.LENGTH_SHORT).show()
                showDateTimePicker()
                return true
            }

            R.id.settings -> {
                Toast.makeText(this, "Settings selected", Toast.LENGTH_SHORT).show()
            }
        }
        return true
    }

    override fun onCreateContextMenu(menu: ContextMenu?, v: View?, menuInfo: ContextMenu.ContextMenuInfo?) {
        super.onCreateContextMenu(menu, v, menuInfo)
        menuInflater.inflate(R.menu.context, menu)
    }

    override fun onContextItemSelected(item: MenuItem): Boolean {
        when (item.itemId) {
            R.id.edit -> {
                Toast.makeText(this, "Edit selected", Toast.LENGTH_SHORT).show()
            }
            R.id.delete -> {
                Toast.makeText(this, "Delete selected", Toast.LENGTH_SHORT).show()
            }
        }
        return true
    }

    private fun showpopupmenu(view: View?) {
        val pop = PopupMenu(this, view)
        pop.menuInflater.inflate(R.menu.pop, pop.menu)
        pop.setOnMenuItemClickListener { item ->
            when (item.itemId) {
                R.id.about -> {
                    Toast.makeText(this, "About clicked", Toast.LENGTH_SHORT).show()
                    true
                }
                else -> false
            }
        }
        pop.show()
    }

    private fun getadd(lat: Double, long: Double): String? {
        return try {
            val geocoder = Geocoder(this, Locale.getDefault())
            val addresses = geocoder.getFromLocation(lat, long, 1)
            if (!addresses.isNullOrEmpty()) {
                val address = addresses[0]
                address.getAddressLine(0)
            } else null
        } catch (e: Exception) {
            e.printStackTrace()
            null
        }
    }

    private fun showScheduledNotification() {
        val channelId = "scheduled_notification"
        createNotificationChannel(channelId, "Scheduled Notifications", NotificationManager.IMPORTANCE_HIGH)

        val builder = NotificationCompat.Builder(this, channelId)
            .setContentTitle("Reminder!")
            .setContentText("It's time for your scheduled event.")
            .setSmallIcon(android.R.drawable.ic_dialog_info)
            .setAutoCancel(true)

        notificationManager.notify(999, builder.build())
    }

    private fun showDateTimePicker() {
        val calendar = Calendar.getInstance()
        val datePicker = DatePickerDialog(
            this,
            { _, year, month, dayOfMonth ->
                val timePicker = TimePickerDialog(
                    this,
                    { _, hourOfDay, minute ->
                        calendar.set(year, month, dayOfMonth, hourOfDay, minute, 0)
                        scheduleNotification(calendar.timeInMillis)
                    },
                    calendar.get(Calendar.HOUR_OF_DAY),
                    calendar.get(Calendar.MINUTE),
                    true
                )
                timePicker.show()
            },
            calendar.get(Calendar.YEAR),
            calendar.get(Calendar.MONTH),
            calendar.get(Calendar.DAY_OF_MONTH)
        )
        datePicker.show()
    }

    private fun scheduleNotification(timeInMillis: Long) {
        val intent = Intent(this, MainActivity2::class.java)
        intent.action = "SHOW_NOTIFICATION"
        val pendingIntent = PendingIntent.getActivity(
            this,
            0,
            intent,
            PendingIntent.FLAG_IMMUTABLE or PendingIntent.FLAG_UPDATE_CURRENT
        )

        val alarmManager = getSystemService(ALARM_SERVICE) as AlarmManager
        alarmManager.setExact(AlarmManager.RTC_WAKEUP, timeInMillis, pendingIntent)

        Toast.makeText(this, "Notification Scheduled", Toast.LENGTH_SHORT).show()
    }

    private fun handleHotelBooking(hotelKey: String) {
        val isBooked = sharedPreferences.getBoolean(hotelKey, false)
        if (isBooked) {
            AlertDialog.Builder(this)
                .setTitle("Hotel Booking")
                .setMessage("This hotel is already booked!")
                .setPositiveButton("OK", null)
                .show()
        } else {
            AlertDialog.Builder(this)
                .setTitle("Hotel Booking")
                .setMessage("Do you want to book this hotel?")
                .setPositiveButton("Yes") { _, _ ->
                    sharedPreferences.edit().putBoolean(hotelKey, true).apply()
                    Toast.makeText(this, "$hotelKey is booked!", Toast.LENGTH_SHORT).show()
                    showBookingNotification(hotelKey)
                    sendSMS("Your booking at $hotelKey is confirmed. Your stay will be from 9 AM to 10 PM.")
                }
                .setNegativeButton("No", null)
                .show()
        }
    }

    private fun handleUnbooking(hotelKey: String) {
        val isBooked = sharedPreferences.getBoolean(hotelKey, false)
        if (isBooked) {
            AlertDialog.Builder(this)
                .setTitle("Unbook Hotel")
                .setMessage("Do you want to unbook $hotelKey?")
                .setPositiveButton("Yes") { _, _ ->
                    sharedPreferences.edit().putBoolean(hotelKey, false).apply()
                    Toast.makeText(this, "$hotelKey has been unbooked.", Toast.LENGTH_SHORT).show()
                    sendSMS("Your booking at $hotelKey has been canceled.")
                }
                .setNegativeButton("No", null)
                .show()
        } else {
            Toast.makeText(this, "$hotelKey is not booked yet.", Toast.LENGTH_SHORT).show()
        }
    }

    private fun sendSMS(message: String) {
        val phoneNumber = "7695933494" // Replace with the dynamic number if needed
        if (ActivityCompat.checkSelfPermission(this, android.Manifest.permission.SEND_SMS)
            == PackageManager.PERMISSION_GRANTED
        ) {
            val smsManager = SmsManager.getDefault()
            smsManager.sendTextMessage(phoneNumber, null, message, null, null)
            Toast.makeText(this, "SMS Sent", Toast.LENGTH_SHORT).show()
        } else {
            Toast.makeText(this, "SMS permission denied. Requesting permission...", Toast.LENGTH_LONG).show()
            ActivityCompat.requestPermissions(this, arrayOf(android.Manifest.permission.SEND_SMS), 101)
        }
    }

    private fun showBookingNotification(hotelName: String) {
        val channelId = "hotel_booking_channel"
        createNotificationChannel(channelId, "Hotel Booking", NotificationManager.IMPORTANCE_DEFAULT)

        val builder = NotificationCompat.Builder(this, channelId)
            .setContentTitle("Booking Confirmation")
            .setContentText("$hotelName has been successfully booked!")
            .setSmallIcon(android.R.drawable.ic_dialog_info)
            .setAutoCancel(true)

        notificationManager.notify(1001, builder.build())
    }

    private fun createNotificationChannel(channelId: String, channelName: String, importance: Int) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(channelId, channelName, importance).apply {
                description = "This channel is for notifications related to $channelName"
            }
            notificationManager.createNotificationChannel(channel)
        }
    }
}
